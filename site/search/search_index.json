{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IMDb Sentiment Analysis","text":"<p>Welcome to the IMDb Sentiment Analysis API documentation.</p>"},{"location":"reference/main/","title":"API Reference: <code>main.py</code>","text":"<p>main.py</p> <p>FastAPI application for serving sentiment analysis predictions using a fine-tuned BERT model. Includes: - Swagger UI and ReDoc documentation - CORS middleware for cross-origin support - Health check endpoint - Sentiment prediction endpoint</p>"},{"location":"reference/main/#apps.main.PredictionOutput","title":"<code>PredictionOutput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model containing predicted sentiment and confidence score.</p> Source code in <code>src/apps/main.py</code> <pre><code>class PredictionOutput(BaseModel):\n    \"\"\"Response model containing predicted sentiment and confidence score.\"\"\"\n    label: str\n    confidence: float\n</code></pre>"},{"location":"reference/main/#apps.main.ReviewInput","title":"<code>ReviewInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model containing a movie review string.</p> Source code in <code>src/apps/main.py</code> <pre><code>class ReviewInput(BaseModel):\n    \"\"\"Request model containing a movie review string.\"\"\"\n    review: str\n</code></pre>"},{"location":"reference/main/#apps.main.predict_sentiment","title":"<code>predict_sentiment(input)</code>","text":"<p>Predict sentiment from a given movie review.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>ReviewInput</code> <p>Input review text.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, float | str]</code> <p>Sentiment label and confidence score.</p> Source code in <code>src/apps/main.py</code> <pre><code>@app.post(\"/predict\", response_model=PredictionOutput, summary=\"Predict Sentiment\", response_description=\"Predicted sentiment and confidence\")\ndef predict_sentiment(input: ReviewInput) -&gt; dict[str, float | str]:\n    \"\"\"\n    Predict sentiment from a given movie review.\n\n    Args:\n        input (ReviewInput): Input review text.\n\n    Returns:\n        dict: Sentiment label and confidence score.\n    \"\"\"\n    try:\n        label, confidence = predict(model, tokenizer, input.review)\n        return {\"label\": label, \"confidence\": confidence}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre>"},{"location":"reference/main/#apps.main.read_root","title":"<code>read_root()</code>","text":"<p>Health check endpoint to verify service is running.</p> Source code in <code>src/apps/main.py</code> <pre><code>@app.get(\"/\", summary=\"Health Check\", response_description=\"Service status\")\ndef read_root() -&gt; dict[str, str]:\n    \"\"\"Health check endpoint to verify service is running.\"\"\"\n    return {\"status\": \"ok\"}\n</code></pre>"}]}